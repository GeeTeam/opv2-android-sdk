configurations {
    exclude
}

def excludePackages = ['com.cmic.sso.sdk']
def excludeClasses = []

task printMsg {
    group "Geetest"
    doLast {
        println getExcludePackageRegex(excludePackages)
        println getExcludeClassRegex(excludeClasses)
    }
}


def unZipAarFile = new File(buildDir, "unzipaar")
def unZipJarFile = new File(buildDir, 'unzipjar')
def excludeAarFile = new File(buildDir, "excludeaar")
def excludeAarName = "exclude_${getDefaultAar().name.replaceFirst(~/\.[^.]+$/, '')}"

def getDefaultAar() {
    Configuration c = configurations.getByName("default")
    def files = c.artifacts.files.filter {
        it.name ==~ /.*\.aar/
    }

    def file = null
    if (!files.empty) {
        file = files[0]
    }
    return file
}

task deleteDir(type: Delete) {
    delete unZipAarFile, unZipJarFile, excludeAarFile
}

task unZipAar(type: Copy) {
    def zipFile = getDefaultAar()
    def outputDir = unZipAarFile
    from zipTree(zipFile)
    into outputDir
}
unZipAar.dependsOn deleteDir

task unzipJar(type: Copy) {
    def zipFile = new File(unZipAarFile, 'classes.jar')
    def outputDir = unZipJarFile
    from zipTree(zipFile)
    into outputDir
}

unzipJar.dependsOn unZipAar

task zipJar(type: Jar) {
    baseName = 'classes'
    from unZipJarFile
    destinationDir unZipAarFile
    exclude getExcludePackageRegex(excludePackages)
    exclude getExcludeClassRegex(excludeClasses)
}

zipJar.dependsOn unzipJar

task excludeAar(type: Zip) {
    group 'Geetest'
    description '生成一个过滤掉移动的aar包，必须与OneLogin一起使用'
    baseName excludeAarName
    extension "aar"
    from unZipAarFile
    destinationDir excludeAarFile
}

excludeAar.dependsOn zipJar

artifacts {
    exclude excludeAar
}


static def getExcludePackageRegex(def packages) {
    packages?.collect {
        it?.replace('.', '\\')?.plus("\\**")
    }
}

static def getExcludeClassRegex(def classes) {
    classes?.collect {
        it?.replace('.', '\\')?.plus(".class")
    }
}